import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_squared_error


def loadData(filePath):
    """Load the tennis stats CSV dataset."""
    return pd.read_csv(filePath)


def preprocessData(df):
    """Select features and target, and clean missing values."""
    df = df.dropna()

    # Features and target
    features = df[[
        'FirstServe', 'FirstServePointsWon', 'SecondServePointsWon',
        'Aces', 'BreakPointsSaved', 'BreakPointsFaced', 'DoubleFaults',
        'ReturnGamesWon', 'ServiceGamesWon', 'TotalPointsWon'
    ]]
    target = df['Winnings']
    return features, target


def trainModel(X_train, y_train):
    """Train a linear regression model."""
    model = LinearRegression()
    model.fit(X_train, y_train)
    return model


def evaluateModel(model, X_test, y_test):
    """Evaluate the model and return performance metrics."""
    predictions = model.predict(X_test)
    r2 = r2_score(y_test, predictions)
    mse = mean_squared_error(y_test, predictions)
    return r2, mse, predictions


def main():
    df = loadData("tennis_stats.csv")
    X, y = preprocessData(df)

    # Train/test split
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42)

    # Train the model
    model = trainModel(X_train, y_train)

    # Evaluate the model
    r2, mse, predictions = evaluateModel(model, X_test, y_test)

    print(f"Model RÂ² Score: {r2:.2f}")
    print(f"Model Mean Squared Error: {mse:.2f}")
    print("Top 5 Predictions:", predictions[:5])


if __name__ == "__main__":
    main()
